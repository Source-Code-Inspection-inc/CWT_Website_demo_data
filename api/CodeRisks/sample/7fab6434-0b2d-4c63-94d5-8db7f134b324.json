{"items":[{"id":null,"type":"Ip","filePath":"src/Middleware/Rewrite/test/PatternSegments/RemoteAddressSegmentTests.cs","language":"C#","finding":"20.30.40.50","lineContent":"Assert.Equal(\"20.30.40.50\", results);","line":24,"column":15},{"id":null,"type":"File","filePath":"src/Components/test/E2ETest/ServerExecutionTests/PrerenderingTest.cs","language":"C#","finding":"\"/root/relative\", \"/root/relative\"","lineContent":"[InlineData(\"/root/relative\", \"/root/relative\")]","line":107,"column":13},{"id":null,"type":"Domain","filePath":"src/SignalR/clients/ts/signalr/tests/HttpConnection.test.ts","language":"TypeScript","finding":"","lineContent":"expect(httpClient.sentRequests[0].url).toBe(\"http://tempuri.org/negotiate?negotiateVersion=1\");","line":692,"column":1},{"id":null,"type":"ApiKey","filePath":"src/Security/Authentication/JwtBearer/src/JwtBearerHandler.cs","language":"C#","finding":"token: \" + token ?? \"[null]\"","lineContent":"return AuthenticateResult.Fail(\"No SecurityTokenValidator available for token: \" + token ?? \"[null]\");","line":181,"column":73},{"id":null,"type":"UserId","filePath":"src/Http/Owin/src/OwinConstants.cs","language":"C#","finding":"User = \"server.User\";","lineContent":"public const string User = \"server.User\";","line":172,"column":21},{"id":null,"type":"Password","filePath":"src/Shared/HttpSys/RequestProcessing/HttpKnownHeaderNames.cs","language":"C#","finding":"Server = \"Server\";","lineContent":"internal const string Server = \"Server\";","line":35,"column":23},{"id":null,"type":"Ip","filePath":"src/Middleware/Rewrite/test/PatternSegments/RemoteAddressSegmentTests.cs","language":"C#","finding":"20.30.40.50","lineContent":"context.HttpContext.Connection.RemoteIpAddress = IPAddress.Parse(\"20.30.40.50\");","line":19,"column":67},{"id":null,"type":"File","filePath":"src/Razor/Microsoft.AspNetCore.Razor.Language/test/RazorSourceDocumentTest.cs","language":"C#","finding":"\"c:\\\\myapp\\\\filePath.cshtml\"","lineContent":"Assert.Equal(\"c:\\\\myapp\\\\filePath.cshtml\", document.FilePath);","line":174,"column":14},{"id":null,"type":"Domain","filePath":"src/SignalR/clients/ts/signalr/tests/HttpConnection.test.ts","language":"TypeScript","finding":"","lineContent":"expect(httpClient.sentRequests[1].url).toBe(\"https://another.domain.url/chat/negotiate?negotiateVersion=1\");","line":693,"column":1},{"id":null,"type":"ApiKey","filePath":"src/Http/Headers/src/SetCookieHeaderValue.cs","language":"C#","finding":"Token = \"httponly\";","lineContent":"private const string HttpOnlyToken = \"httponly\";","line":34,"column":30}],"paging":null}